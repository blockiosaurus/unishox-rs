/* automatically generated by rust-bindgen 0.69.1 */

pub const UNISHOX_VERSION: &[u8; 4] = b"2.0\0";
pub const UNISHOX_API_WITH_OUTPUT_LEN: u32 = 0;
pub const UNISHOX_MAGIC_BITS: u32 = 255;
pub const UNISHOX_MAGIC_BIT_LEN: u32 = 1;
#[doc = " This structure is used when a string array needs to be compressed.\n This is passed as a parameter to the unishox2_decompress_lines() function"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct us_lnk_lst {
    pub data: *mut ::std::os::raw::c_char,
    pub previous: *mut us_lnk_lst,
}
#[test]
fn bindgen_test_layout_us_lnk_lst() {
    const UNINIT: ::std::mem::MaybeUninit<us_lnk_lst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<us_lnk_lst>(),
        16usize,
        concat!("Size of: ", stringify!(us_lnk_lst))
    );
    assert_eq!(
        ::std::mem::align_of::<us_lnk_lst>(),
        8usize,
        concat!("Alignment of ", stringify!(us_lnk_lst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(us_lnk_lst),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(us_lnk_lst),
            "::",
            stringify!(previous)
        )
    );
}
extern "C" {
    #[doc = " Simple API for compressing a string\n @param[in] in    Input ASCII / UTF-8 string\n @param[in] len   length in bytes\n @param[out] out  output buffer - should be large enough to hold compressed output"]
    pub fn unishox2_compress_simple(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Simple API for decompressing a string\n @param[in] in    Input compressed bytes (output of unishox2_compress functions)\n @param[in] len   length of 'in' in bytes\n @param[out] out  output buffer for ASCII / UTF-8 string - should be large enough"]
    pub fn unishox2_decompress_simple(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Comprehensive API for compressing a string\n\n Presets are available for the last four parameters so they can be passed as single parameter. \\n\n See USX_PSET_* macros. Example call: \\n\n    unishox2_compress(in, len, out, olen, USX_PSET_ALPHA_ONLY);\n\n @param[in] in             Input ASCII / UTF-8 string\n @param[in] len            length in bytes\n @param[out] out           output buffer - should be large enough to hold compressed output\n @param[in] olen           length of 'out' buffer in bytes. Can be omitted if sufficient buffer is provided\n @param[in] usx_hcodes     Horizontal codes (array of bytes). See macro section for samples.\n @param[in] usx_hcode_lens Length of each element in usx_hcodes array\n @param[in] usx_freq_seq   Frequently occuring sequences. See USX_FREQ_SEQ_* macros for samples\n @param[in] usx_templates  Templates of frequently occuring patterns. See USX_TEMPLATES macro."]
    pub fn unishox2_compress(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
        usx_hcodes: *const ::std::os::raw::c_uchar,
        usx_hcode_lens: *const ::std::os::raw::c_uchar,
        usx_freq_seq: *mut *const ::std::os::raw::c_char,
        usx_templates: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Comprehensive API for de-compressing a string\n\n Presets are available for the last four parameters so they can be passed as single parameter. \\n\n See USX_PSET_* macros. Example call: \\n\n    unishox2_decompress(in, len, out, olen, USX_PSET_ALPHA_ONLY);\n\n @param[in] in             Input compressed bytes (output of unishox2_compress functions)\n @param[in] len            length of 'in' in bytes\n @param[out] out           output buffer - should be large enough to hold de-compressed output\n @param[in] olen           length of 'out' buffer in bytes. Can be omitted if sufficient buffer is provided\n @param[in] usx_hcodes     Horizontal codes (array of bytes). See macro section for samples.\n @param[in] usx_hcode_lens Length of each element in usx_hcodes array\n @param[in] usx_freq_seq   Frequently occuring sequences. See USX_FREQ_SEQ_* macros for samples\n @param[in] usx_templates  Templates of frequently occuring patterns. See USX_TEMPLATES macro."]
    pub fn unishox2_decompress(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
        usx_hcodes: *const ::std::os::raw::c_uchar,
        usx_hcode_lens: *const ::std::os::raw::c_uchar,
        usx_freq_seq: *mut *const ::std::os::raw::c_char,
        usx_templates: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " More Comprehensive API for compressing array of strings\n\n See unishox2_compress() function for parameter definitions. \\n\n This function takes an additional parameter, i.e. 'prev_lines' - the usx_lnk_lst structure \\n\n See -g parameter in test_unishox2.c to find out how this can be used. \\n\n This function is used when an array of strings need to be compressed \\n\n and stored in a compressed array of bytes for use as a constant in other programs \\n\n where each element of the array can be decompressed and used at runtime."]
    pub fn unishox2_compress_lines(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
        usx_hcodes: *const ::std::os::raw::c_uchar,
        usx_hcode_lens: *const ::std::os::raw::c_uchar,
        usx_freq_seq: *mut *const ::std::os::raw::c_char,
        usx_templates: *mut *const ::std::os::raw::c_char,
        prev_lines: *mut us_lnk_lst,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " More Comprehensive API for de-compressing array of strings \\n\n This function is not be used in conjuction with unishox2_compress_lines()\n\n See unishox2_decompress() function for parameter definitions. \\n\n Typically an array is compressed using unishox2_compress_lines() and \\n\n a header (.h) file is generated using the resultant compressed array. \\n\n This header file can be used in another program with another decompress \\n\n routine which takes this compressed array as parameter and index to be \\n\n decompressed."]
    pub fn unishox2_decompress_lines(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
        usx_hcodes: *const ::std::os::raw::c_uchar,
        usx_hcode_lens: *const ::std::os::raw::c_uchar,
        usx_freq_seq: *mut *const ::std::os::raw::c_char,
        usx_templates: *mut *const ::std::os::raw::c_char,
        prev_lines: *mut us_lnk_lst,
    ) -> ::std::os::raw::c_int;
}
